{
    "name": "inpainting_celebahq", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": "/kaggle/input/o64-m8-39/39" 
        // "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "InpaintDataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "data_root": "/kaggle/working/o64_m8_mean/datasets/celebahq/flist/train_64_28000.flist",
                    "data_len": -1,
                    "mask_config": {
                        "mask_mode": "hybrid",
                        "phase": "train",
                        "m12_mode": "mask_generation/lama_generation/random_medium_64.yaml"
                    }
                }
            },
            "dataloader":{
                "validation_split": 4, // percent or number
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 5, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 2, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": true
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": "InpaintDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "/kaggle/working/o64_m8_mean/datasets/celebahq/flist/test_64_2000.flist",
                    "mask_config": {
                        "mask_mode": "center",
                        "phase": "test"
                    }
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 4,
                    "num_workers": 4,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "inpainting",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 5e-5, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 6,
                        "out_channel": 3,
                        "inner_channel": 64,
                        "channel_mults": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            16
                            // 8
                        ],
                        "num_head_channels": 32,
                        "res_blocks": 2,
                        "dropout": 0.2,
                        "image_size": 64
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            // "n_timestep": 10, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 78, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 1, // valdation every specified number of epochs
        "save_checkpoint_epoch": 10,
        "log_iter": 1e3, // log every specified number of iterations
        "tensorboard" : false, // tensorboardX enable
        "min_val_mae_loss": 0.042452335357666016,
        "min_val_flag": false,
        "train_previous": [0.08530702163933214, 0.018943586379004784, 0.01516380057013667, 0.012444856269423989, 0.01167374264525049, 0.01126680354477048, 0.010210968097782719, 0.010091825282058873, 0.010185467517929935, 0.009679518191387885, 0.009771642708429683, 0.009642332731662763, 0.009105797257525776, 0.009058930832615972, 0.008753284278220788, 0.009051666934557043, 0.008493203205616253, 0.008402547127175749, 0.008600493418694299, 0.008542702455412405, 0.008574075233147084, 0.008455557209524536, 0.008192343588500142, 0.008573005495129427, 0.008420236895892773, 0.00832528084779072, 0.008371570091114012, 0.00796262232529969, 0.008023188426192247, 0.007834295973600573, 0.007867360264243823, 0.007918226711438582, 0.0079217612581748, 0.007594339978140087, 0.007615790078888422, 0.007517094965165706, 0.007851389479172976, 0.0076489039900140545, 0.00745442119285811],
        "eval_previous": [0.11468203365802765, 0.10017223656177521, 0.07366480678319931, 0.07317798584699631, 0.12783637642860413, 0.10984153300523758, 0.05958137661218643, 0.05302033573389053, 0.06083337590098381, 0.06447456777095795, 0.055266834795475006, 0.1155867725610733, 0.05502001941204071, 0.05927959829568863, 0.07080069929361343, 0.058640237897634506, 0.066536083817482, 0.06062537431716919, 0.05947890505194664, 0.05564075708389282, 0.05636551231145859, 0.0565715916454792, 0.054245464503765106, 0.049492329359054565, 0.05137290060520172, 0.05399695783853531, 0.05281530320644379, 0.06527166068553925, 0.04917828366160393, 0.05031750351190567, 0.047581762075424194, 0.04943937063217163, 0.053928423672914505, 0.042452335357666016, 0.04903404787182808, 0.047421492636203766, 0.060263246297836304, 0.046007994562387466, 0.05076795071363449]
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
